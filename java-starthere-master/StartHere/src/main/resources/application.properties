server.port=${PORT:2019}

# Begin h2 configuration
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.h2.console.settings.web-allow-others=true
# End h2 configuration

# Begin PostgreSQL local configuration
#spring.datasource.url=jdbc:postgressql://localhost:5432/dbstarthere
#spring.datasource.username=postgresql
#spring.datasource.password=${MYDBPASSWORD:password}
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# End PostgreSQL local configuration



# Begin PostgreSQL heroku configuration
# heroku config -a jrmmba-bookstore
# postgres://rrwzjxlkniayov:83e8dc9dc5a3c3a30e40dde8fb62941da11030b3953709f5c8f808690e776c71@ec2-54-243-241-62.compute-1.amazonaws.com:5432/d7bl8dlv2l83jj
# posgress://username      :password                                                        @url                                      :5432/dbname
# check environment variables:
#      heroku run echo \$SPRING_DATASOURCE_URL -a jrmmba-bookstore
#      heroku run echo \$SPRING_DATASOURCE_USERNAME -a jrmmba-bookstore
#      heroku run echo \$SPRING_DATASOURCE_PASSWORD -a jrmmba-bookstore

### If your environment variables do not get set
#postgres://vjienmblslyxrz:e4cba58d9b3fcc2b6ee72f008402b5c9de48b43800414f5a5d8a0dfe572cccc5@ec2-54-243-241-62.compute-1.amazonaws.com:5432/ddptiibmg9340b

#DATABASE_URL: postgres://aqbwarvblwtbrm:b12ddee553f5fe34bde02df1163bb052f373e74073575581103b6377087aa491@ec2-23-23-182-18.compute-1.amazonaws.com:5432/d17m2cooduda17
spring.datasource.url=${SPRING_DATA_URL:jdbc:postgresql://ec2-54-243-241-62.compute-1.amazonaws.com:5432/ddptiibmg9340b?user=vjienmblslyxrz&password=e4cba58d9b3fcc2b6ee72f008402b5c9de48b43800414f5a5d8a0dfe572cccc5&sslmode=require}
#password to our database
spring.datasource.username=vjienmblslyxrz
spring.datasource.password=e4cba58d9b3fcc2b6ee72f008402b5c9de48b43800414f5a5d8a0dfe572cccc5
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# End PostgreSQL heroku configuration

# What do with the schema
# drop n create table again, good for testing
spring.jpa.hibernate.ddl-auto=none
spring.datasource.initialization-mode=never
# Good for production!
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.initialization-mode=never


# Feature that determines what happens when no accessors are found for a type
# (and there are no annotations to indicate it is meant to be serialized).
spring.jackson.serialization.fail-on-empty-beans=false

# Turns off Spring Boot automatic exception handling
server.error.whitelabel.enabled=false

# needed for actuators to work
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true
